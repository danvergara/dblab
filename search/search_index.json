{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to dblab","text":"<p>Cross-platform, zero dependencies, terminal based UI application for your Data Bases.  </p> <p> </p> <p>Documentation: https://dblab.app</p> <p>Source Code: https://github.com/danvergara/dblab</p>"},{"location":"#overview","title":"Overview","text":"<p>dblab is a fast and lightweight interactive terminal based UI application for PostgreSQL, MySQL and SQLite3, written in Go and works on OSX, Linux and Windows machines. Main idea behind using Go for backend development is to utilize ability of the compiler to produce zero-dependency binaries for multiple platforms. dblab was created as an attempt to build very simple and portable application to work with local or remote PostgreSQL/MySQL/SQLite3/Oracle/SQL Server databases.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Cross-platform support OSX/Linux/Windows 32/64-bit  </li> <li>Simple installation (distributed as a single binary)  </li> <li>Zero dependencies.  </li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>if you need to work with SQLite3, install the CGO enabled binary using the proper bash script listed below.</p> <p>The above comment is deprecated and CGO is not needed anymore.  There will be a single binary capable to deal with all supported clients.</p>"},{"location":"#homebrew-installation","title":"Homebrew installation","text":"<p>It works with Linux too.</p> <pre><code>brew install --cask danvergara/tools/dblab\n</code></pre> <p>Or</p> <pre><code>brew tap danvergara/tools\nbrew install --cask dblab\n</code></pre>"},{"location":"#manual-binary-installation","title":"Manual Binary Installation","text":"<p>The binaries are compatible with Linux, OSX and Windows. You can manually download and install the binary release from the release page.</p>"},{"location":"#automated-installationupdate","title":"Automated installation/update","text":"<p>Don't forget to always verify what you're piping into bash</p> <p>Install the binary using our bash script:</p> <pre><code>curl https://raw.githubusercontent.com/danvergara/dblab/master/scripts/install_update_linux.sh | bash\n</code></pre>"},{"location":"contribute/","title":"Contribute","text":"<ul> <li>Fork this repository</li> <li>Create a new feature branch for a new functionality or bugfix</li> <li>Commit your changes</li> <li>Execute test suite</li> <li>Push your code and open a new pull request</li> <li>Use issues for any questions</li> <li>Check wiki for extra documentation</li> </ul>"},{"location":"features/","title":"Features","text":"<p>The key features are:</p> <ul> <li>Cross-platform support OSX/Linux/Windows 32/64-bit  </li> <li>Simple installation (distributed as a single binary)  </li> <li>Zero dependencies.  </li> </ul>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#using-flags","title":"Using flags","text":"<p>You can start the app without passing flags or parameters, so then an interactive command prompt will ask for the connection details.  </p> <p></p> <p>Otherwise, you can explicitly include the connection details using multiple parameters:</p> <pre><code>dblab --host localhost --user myuser --db users --pass password --ssl disable --port 5432 --driver postgres --limit 50\n</code></pre> <pre><code>dblab --db path/to/file.sqlite3 --driver sqlite\n</code></pre> <p>Connection URL scheme is also supported:</p> <p><pre><code>dblab --url postgres://user:password@host:port/database?sslmode=[mode]\n</code></pre> <pre><code>dblab --url mysql://user:password@tcp(host:port)/db\n</code></pre> <pre><code>dblab --url file:test.db?cache=shared&amp;mode=memory\n</code></pre></p> <p>if you're using PostgreSQL or Oracle, you have the option to define the schema you want to work with, the default value is <code>public</code> for Postgres, empty for Oracle.</p> <p><pre><code>dblab --host localhost --user myuser --db users --pass password --schema myschema --ssl disable --port 5432 --driver postgres --limit 50\n</code></pre> <pre><code>dblab --url postgres://user:password@host:port/database?sslmode=[mode] --schema myschema\n</code></pre> <pre><code>dblab --host localhost --user user2 --db FREEPDB1 --pass password --port 1521 --driver oracle --limit 50 --schema user1\n</code></pre> <pre><code>dblab --url 'oracle://user2:password@localhost:1521/FREEPDB1' --schema user1\n</code></pre></p> <p>As a request made in #125, support for MySQL/MariaDB sockets was integrated.</p> <p><pre><code>dblab --url \"mysql://user:password@unix(/path/to/socket/mysql.sock)/dbname?charset=utf8\"\n</code></pre> <pre><code>dblab --socket /path/to/socket/mysql.sock --user user --db dbname --pass password --ssl disable --port 5432 --driver mysql --limit 50\n</code></pre></p> <p>For more information about the available flags check the Usage section.</p>"},{"location":"quickstart/#using-a-config-file","title":"Using a config file","text":"<p>default: the first configuration after the <code>database</code> field. <pre><code>dbladb --config\n</code></pre> <pre><code>dblab --config --cfg-name \"prod\"\n</code></pre></p> <p><code>.dblab.yaml</code> example:</p> <pre><code>database:\n  - name: \"test\"\n    host: \"localhost\"\n    port: 5432\n    db: \"users\"\n    password: \"password\"\n    user: \"postgres\"\n    driver: \"postgres\"\n    # optional\n    # postgres only\n    # default value: public\n    schema: \"myschema\"\n  - name: \"prod\"\n    # example endpoint\n    host: \"mydb.123456789012.us-east-1.rds.amazonaws.com\"\n    port: 5432\n    db: \"users\"\n    password: \"password\"\n    user: \"postgres\"\n    schema: \"public\"\n    driver: \"postgres\"\n  - name: \"oracle\"\n    host: \"localhost\"\n    port: 1521\n    db: \"FREEPDB1\"\n    schema: \"user1\"\n    password: \"password\"\n    user: \"user2\"\n    driver: \"oracle\"\n    ssl: \"enable\"\n    wallet: \"path/to/wallet\"\n    ssl-verify: true\n# should be greater than 0, otherwise the app will error out\nlimit: 50\n</code></pre> <p>Or for sqlite:</p> <pre><code>database:\n  - name: \"prod\"\n    db: \"path/to/file.sqlite3\"\n    driver: \"sqlite\"\n</code></pre> <p>Only the <code>host</code> and <code>ssl</code> fields are optionals. <code>127.0.0.1</code> and <code>disable</code>, respectively.</p>"},{"location":"release-notes/","title":"Release Notes","text":"<p>You can find the updated release notes in the following link:  </p> <p>https://github.com/danvergara/dblab/releases</p>"},{"location":"usage/","title":"Usage","text":"<p>You can get started by using the connection flags or by using a configuration file with the connection params.</p> <pre><code>$ dblab [flags] \n</code></pre> <p>or</p> <pre><code>$ dblab [command]\n</code></pre>"},{"location":"usage/#available-commands","title":"Available Commands","text":"<code>help</code> Help about any command <code>version</code> The version of the project"},{"location":"usage/#flags","title":"Flags","text":"<pre><code>dblab is a terminal UI based interactive database client for Postgres, MySQL and SQLite3.\n\nUsage:\n  dblab [flags]\n  dblab [command]\n\nAvailable Commands:\n  help        Help about any command\n  version     The version of the project\n\nFlags:\n      --cfg-name string                   Database config name section\n      --config                            Get the connection data from a config file (default locations are: current directory, $HOME/.dblab.yaml or $XDG_CONFIG_HOME/.dblab.yaml)\n      --keybindings, -k                   Get the keybindings configuration from the config file (default locations are: current directory, $HOME/.dblab.yaml or $XDG_CONFIG_HOME/.dblab.yaml)\n      --db string                         Database name (optional)\n      --driver string                     Database driver\n      --encrypt string                    [strict|disable|false|true] data sent between client and server is encrypted or not\n  -h, --help                              help for dblab\n      --host string                       Server host name or IP\n      --limit uint                        Size of the result set from the table content query (should be greater than zero, otherwise the app will error out) (default 100)\n      --pass string                       Password for user\n      --port string                       Server port\n      --schema string                     Database schema (postgres and oracle only)\n      --socket string                     Path to a Unix socket file\n      --ssh-host string                   SSH Server Hostname/IP\n      --ssh-key string                    File with private key for SSH authentication\n      --ssh-key-pass string               Supports connections with protected private keys with passphrase\n      --ssh-pass string                   SSH Password (Empty string for no password)\n      --ssh-port string                   SSH Port\n      --ssh-user string                   SSH User\n      --ssl string                        SSL mode\n      --ssl-verify string                 [enable|disable] or [true|false] enable ssl verify for the server\n      --sslcert string                    This parameter specifies the file name of the client SSL certificate, replacing the default ~/.postgresql/postgresql.crt\n      --sslkey string                     This parameter specifies the location for the secret key used for the client certificate. It can either specify a file name that will be used instead of the default ~/.postgresql/postgresql.key, or it can specify a key obtained from an external \u201cengine\u201d\n      --sslpassword string                This parameter specifies the password for the secret key specified in sslkey\n      --sslrootcert string                This parameter specifies the name of a file containing SSL certificate authority (CA) certificate(s) The default is ~/.postgresql/root.crt\n      --timeout string                    in seconds (default is 0 for no timeout), set to 0 for no timeout. Recommended to set to 0 and use context to manage query and connection timeouts\n      --trace-file string                 File name for trace log\n      --trust-server-certificate string   [false|true] server certificate is checked or not\n  -u, --url string                        Database connection string\n      --user string                       Database user\n  -v, --version                           version for dblab\n      --wallet string                     Path for auto-login oracle wallet\n\nUse \"dblab [command] --help\" for more information about a command.\n</code></pre>"},{"location":"usage/#navigation","title":"Navigation","text":"<p>If the query panel is active, type the desired query and press Ctrl+Space to see the results on the rows panel below. Otherwise, you might me located at the tables panel, then you can navigate by using the arrows Up and Down (or the keys k and j respectively).  </p> <p>If you want to see the rows of a table, press Enter.  </p> <p>To see the schema of a table, locate yourself on the <code>rows</code> panel and press Ctrl+S to switch to the <code>structure</code> panel, then switch Ctrl+S to switch back.  </p> <p>The same can be achieved for the <code>constraints</code> view by pressing Ctrl+T to go back and forth between the <code>rows</code> and the <code>constraints</code> panels.</p> <p>The <code>--db</code> flag is now optional (except for Oracle), meaning that the user will be able to see the list of databases they have access to. The regular list of tables will be replaced with a tree structure showing a list of databases and their respective list of tables, branching off each database. Due to the nature of the vast majority of DBMSs that don't allow cross-database queries, dblab has to open an independent connection for each database. The side effect of this decision, is that the user has to press <code>Enter</code> on the specific database of interest. An indicator showing the current active database will appear at the bottom-right of the screen. To change the focus, just hit enter on another database. Once a database is selected, the usual behavior of inspecting tables remains the same.</p> <p></p> <p>Now, there's a menu to navigate between hidden views by just clicking on the desired options:</p> <p> </p>"},{"location":"usage/#key-bindings","title":"Key Bindings","text":"Key Description Ctrl+Space If the query panel is active, execute the query Ctrl+D Cleans the whole text from the query editor, when the editor is selected Enter If the tables panel is active, list all the rows as a result set on the rows panel and display the structure of the table on the structure panel Ctrl+S If the rows panel is active, switch to the schema panel. The opposite is true Ctrl+T If the rows panel is active, switch to the constraints view. The opposite is true Ctrl+I If the rows panel is active, switch to the indexes view. The opposite is true Ctrl+H Toggle to the panel on the left Ctrl+J Toggle to the panel below Ctrl+K Toggle to the panel above Ctrl+L Toggle to the panel on the right Arrow Up Next row of the result set on the panel. Views: rows, table, constraints, structure and indexes k Next row of the result set on the panel. Views: rows, table, constraints, structure and indexes Arrow Down Previous row of the result set on the panel. Views: rows, table, constraints, structure and indexes j Previous row of the result set on the panel. Views: rows, table, constraints, structure and indexes Arrow Right Horizontal scrolling on the panel. Views: rows, constraints, structure and indexes l Horizontal scrolling on the panel. Views: rows, constraints, structure and indexes Arrow Left Horizontal scrolling on the panel. Views: rows, constraints, structure and indexes h Horizontal scrolling on the panel. Views: rows, constraints, structure and indexes g Move cursor to the top of the panel's dataset. Views: rows, constraints, structure and indexes G Move cursor to the bottom of the panel's dataset. Views: rows, constraints, structure and indexes Ctrl-F Move down by one page. Views: rows, constraints, structure and indexes Ctrl-B Move up by one page. Views: rows, constraints, structure and indexes Ctrl+c Quit"},{"location":"usage/#connection-examples","title":"Connection Examples","text":"<p>You can start the app without passing flags or parameters, so then an interactive command prompt will ask for the connection details.  </p> <p></p> <p>Otherwise, you can explicitly include the connection details using multiple parameters:</p> <p><pre><code>dblab --host localhost --user myuser --db users --pass password --ssl disable --port 5432 --driver postgres --limit 50\n</code></pre> <pre><code>dblab --db path/to/file.sqlite3 --driver sqlite\n</code></pre> <pre><code>dblab --host localhost --user system --db FREEPDB1 --pass password --port 1521 --driver oracle --limit 50\n</code></pre> <pre><code>dblab --host localhost --user SA --db msdb --pass '5@klkbN#ABC' --port 1433 --driver sqlserver --limit 50\n</code></pre></p> <p>Connection URL scheme is also supported:</p> <p><pre><code>dblab --url postgres://user:password@host:port/database?sslmode=[mode]\n</code></pre> <pre><code>dblab --url mysql://user:password@tcp(host:port)/db\n</code></pre> <pre><code>dblab --url file:test.db?cache=shared&amp;mode=memory\n</code></pre> <pre><code>dblab --url 'oracle://user:password@localhost:1521/db'\n</code></pre> <pre><code>dblab --url 'sqlserver://SA:myStrong(!)Password@localhost:1433?database=tempdb&amp;encrypt=true&amp;trustservercertificate=false&amp;connection+timeout=30'\n</code></pre></p> <p>if you're using PostgreSQL or Oracle, you have the option to define the schema you want to work with, the default value is <code>public</code> for Postgres, empty for Oracle.</p> <p>Postgres</p> <p><pre><code>dblab --host localhost --user myuser --db users --pass password --schema myschema --ssl disable --port 5432 --driver postgres --limit 50\n</code></pre> <pre><code>dblab --url postgres://user:password@host:port/database?sslmode=[mode] --schema myschema\n</code></pre></p> <p>Oracle</p> <p><pre><code>dblab --host localhost --user user2 --db FREEPDB1 --pass password --port 1521 --driver oracle --limit 50 --schema user1\n</code></pre> <pre><code>dblab --url 'oracle://user2:password@localhost:1521/FREEPDB1' --schema user1\n</code></pre></p> <p>As a request made in #125, support for MySQL/MariaDB sockets was integrated.</p> <p><pre><code>dblab --url \"mysql://user:password@unix(/path/to/socket/mysql.sock)/dbname?charset=utf8\"\n</code></pre> <pre><code>dblab --socket /path/to/socket/mysql.sock --user user --db dbname --pass password --ssl disable --port 5432 --driver mysql --limit 50\n</code></pre></p> <p>Postgres connection through Unix sockets:</p> <pre><code>$ dblab --url \"postgres://user:password@/dbname?host=/path/to/socket\"\n$ dblab --socket /path/to/socket --user user --db dbname --pass password --ssl disable --port 5432 --driver postgres --limit 50\n</code></pre> <p>Now, it is possible to ensure SSL connections with <code>PostgreSQL</code> databases. SSL related parameters has been added, such as <code>--sslcert</code>, <code>--sslkey</code>, <code>--sslpassword</code>, <code>--sslrootcert</code>. More information on how to use such connection flags can be found here.</p> <pre><code>dblab --host  db-postgresql-nyc3-56456-do-user-foo-0.fake.db.ondigitalocean.com --user myuser --db users --pass password --schema myschema --port 5432 --driver postgres --limit 50 --ssl require --sslrootcert ~/Downloads/foo.crt\n</code></pre>"},{"location":"usage/#ssh-tunnel","title":"SSH Tunnel","text":"<p>Now, it's possible to connect to Postgres or MySQL (more to come later) databases on a server via SSH using password or a ssh key files.</p> <p>To do so, 6 new flags has been added to the dblab command:</p> Flag Description --ssh-host SSH Server Hostname/IP --ssh-port SSH Port --ssh-user SSH User --ssh-pass SSH Password (Empty string for no password) --ssh-key File with private key for SSH authentication --ssh-key-pass Passphrase for protected private key files"},{"location":"usage/#examples","title":"Examples","text":"<p>Postgres connection via ssh tunnel using password:</p> <pre><code>dblab --host localhost --user postgres --pass password --schema public --ssl disable --port 5432 --driver postgres --limit 50 --ssh-host example.com --ssh-port 22 --ssh-user root --ssh-pass root\n</code></pre> <p>Postgres connection via ssh tunnel using ssh private key file:</p> <pre><code>dblab --host localhost --user postgres --pass password --schema public --ssl disable --port 5432 --driver postgres --limit 50 --ssh-host example.com --ssh-port 22 --ssh-user root --ssh-key my_ssh_key --ssh-key-pass password\n</code></pre> <p>Postgres connection using the url parameter via ssh tunnel using password:</p> <pre><code>dblab --url postgres://postgres:password@localhost:5432/users?sslmode=disable --schema public --ssh-host example.com --ssh-port 22 --ssh-user root --ssh-pass root\n</code></pre> <p>MySQL connection via ssh tunnel using password:</p> <pre><code>dblab --host localhost --user myuser --db mydb --pass 5@klkbN#ABC --ssl enable --port 3306 --driver mysql --limit 50 --ssh-host example.com --ssh-port 22 --ssh-user root --ssh-pass root\n</code></pre> <p>MySQL connection via ssh tunnel using ssh private key file:</p> <pre><code>dblab --host localhost --user postgres --pass password --ssl enable --port 3306 --driver mysql --limit 50 --ssh-host example.com --ssh-port 22 --ssh-user root --ssh-key my_ssh_key --ssh-key-pass passphrase\n</code></pre> <p>MySQL connection using the url parameter via ssh tunnel using password:</p> <pre><code>dblab --url \"mysql://myuser:5@klkbN#ABC@mysql+tcp(localhost:3306)/mydb\" --driver mysql --ssh-host example.com --ssh-port 22 --ssh-user root --ssh-pass root\n</code></pre>"},{"location":"usage/#configuration","title":"Configuration","text":"<p>Entering the parameters and flags every time you want to use it is tedious,  so <code>dblab</code> provides a couple of flags to help with it: <code>--config</code> and <code>--cfg-name</code>.</p> <p><code>dblab</code> is going to look for a file called <code>.dblab.yaml</code>. Currently, there are three places where you can drop a config file:</p> <ul> <li>$XDG_CONFIG_HOME ($XDG_CONFIG_HOME/.dblab.yaml)</li> <li>$HOME ($HOME/.dblab.yaml)</li> <li>. (the current directory where you run the command line tool)</li> </ul> <p>If you want to use this feature, <code>--config</code> is mandatory and <code>--cfg-name</code> may be omitted. The config file can store one or multiple database connection sections under the <code>database</code> field. <code>database</code> is an array, previously was an object only able to store a single connection section at a time. </p> <p>We strongly encourage you to adopt the new format as of <code>v0.18.0</code>. <code>--cfg-name</code> takes the name of the desired database section to connect with. It can be omitted and its default values will be the first item on the array.</p> <p>As of <code>v0.21.0</code>, ssl connections options are supported in the config file.</p> <p><pre><code>dbladb --config\n</code></pre> <pre><code>dblab --config --cfg-name \"prod\"\n</code></pre></p>"},{"location":"usage/#key-bindings-configuration","title":"Key bindings configuration","text":"<p>Key bindings can be configured through the <code>.dblab.yaml</code> file. There is a field called <code>keybindings</code> where key bindings can be modified. By default, the keybindings are not loaded, so you need to use the <code>--keybindings</code> or <code>-k</code> flag to load them. See the example to see the full list of the key bindings subject to change. The file shows the default values. The list of the available key bindings belongs to the tcell library. Specifically, see the KeyNames map, for an accurate reference.</p>"},{"location":"usage/#dblabyaml-example","title":".dblab.yaml example","text":"<pre><code>database:\n  - name: \"test\"\n    host: \"localhost\"\n    port: 5432\n    db: \"users\"\n    password: \"password\"\n    user: \"postgres\"\n    driver: \"postgres\"\n    # optional\n    # postgres only\n    # default value: public\n    schema: \"myschema\"\n  - name: \"prod\"\n    # example endpoint\n    host: \"mydb.123456789012.us-east-1.rds.amazonaws.com\"\n    port: 5432\n    db: \"users\"\n    password: \"password\"\n    user: \"postgres\"\n    schema: \"public\"\n    driver: \"postgres\"\n    ssl: \"require\"\n    sslrootcert: \"~/.postgresql/root.crt.\"\n  - name: \"oracle\"\n    host: \"localhost\"\n    port: 1521\n    db: \"FREEPDB1\"\n    schema: \"user1\"\n    password: \"password\"\n    user: \"user2\"\n    driver: \"oracle\"\n    ssl: \"enable\"\n    wallet: \"path/to/wallet\"\n    ssl-verify: true\n  - name: \"sqlserver\"\n    driver: \"sqlserver\"\n    host: \"localhost\"\n    port: 1433\n    db: \"msdb\"\n    password: \"5@klkbN#ABC\"\n    user: \"SA\"\n  - name: \"ssh-tunnel\"\n    host: \"localhost\"\n    port: 5432\n    db: \"users\"\n    password: \"password\"\n    user: \"postgres\"\n    schema: \"public\"\n    driver: \"postgres\"\n    ssh-host: \"example.com\"\n    ssh-port: 22\n    ssh-user: \"ssh-user\"\n    ssh-pass: \"password\"\n  - name: \"realistic-ssh-example\"\n    host: \"rds-endpoint.region.rds.amazonaws.com\"\n    port: 5432\n    db: \"database_name\"\n    user: \"db_user\"\n    password: \"password\"\n    schema: \"schema_name\"\n    driver: \"postgres\"\n    ssl: \"require\"\n    ssh-host: \"bastion.host.ip\"\n    ssh-port: 22\n    ssh-user: \"ec2-user\"\n    ssh-key-file: \"/path/to/ssh/key.pem\"\n    ssh-key-pass: \"hiuwiewnc092\"\n# should be greater than 0, otherwise the app will error out\nlimit: 50\nkeybindings:\n  run-query: 'Ctrl-Space'\n  structure: 'Ctrl-S'\n  indexes: 'Ctrl-I'\n  constraints: 'Ctrl-T'\n  clear-editor: 'Ctrl-D'\n  navigation:\n    up: 'Ctrl-K'\n    down: 'Ctrl-J'\n    left: 'Ctrl-H'\n    right: 'Ctrl-L'\n</code></pre> <p>Or for sqlite:</p> <pre><code>database:\n  - name: \"prod\"\n    db: \"path/to/file.sqlite3\"\n    driver: \"sqlite\"\n</code></pre> <p>only the <code>host</code> and <code>ssl</code> fields are optionals. <code>127.0.0.1</code> and <code>disable</code>, respectively.</p>"},{"location":"tutorials/","title":"Getting Started","text":"<p>Once the installation is done you can start by typing dblab </p> dblabSelect the database driver:[ ] postgres[ ] mysql[x] sqlite3 <p>When you don't use any flag with <code>dblab</code>, a prompt will ask for the driver to be used. You can navigate through the options with the Arrow Up  and Arrow Down keys or with j an k keys. When the right driver is selected you can press Enter to apply the selection.  </p> <p> For this example we are going to use a sample SQlite database file with a few tables from here, but you can use your own sqlite file. </p> <p>In this case we are going to choose the sqlite3 driver, so the prompt will ask for the path of the db file and the size limit of the result from the queries</p> <p><pre><code>Introduce the connection params:\n\n&gt; File Path\n&gt; Limit\n</code></pre> Then you will be asked to select the ssl mode for the connection with your database, in the case of sqlite3 you can just press Enter.</p> <pre><code>Select the ssl mode (just press enter if you selected sqlite3):\n</code></pre> <p>If everything went well you should see the UI </p> <p>For further knowledge on the navigation of the UI you can check this first steps in navigation</p>"},{"location":"tutorials/config-file/","title":"Config File","text":"<p>We know that writing the parameters and flags every time you want to connect to the database can be very tedious,  so <code>dblab</code> provides the option to create a yaml file with the configuration to connect to the database. You can define multiple database configurations under the <code>database</code> field just be sure to use different names for each of it.</p> <p>For this example we'll be using a PostgreSQL database so the driver to use would be <code>postgres</code>. Remember that every driver has different args that we can include in the config yaml.</p>"},{"location":"tutorials/config-file/#single-database","title":"Single database","text":"<p>In order to connect to a local database hosted in <code>0.0.0.0:5432</code> we can just copy and paste the following configuration to the file with name <code>.dblab.yaml</code> stored either in the root of your current directory, in your $HOME path ($HOME/.dblab.yaml) or in your $XDG_CONFIG_HOME path ($XDG_CONFIG_HOME/.dblab.yaml).</p> <pre><code>database:\n  - name: \"local\"\n    host: \"0.0.0.0\"\n    port: 5432\n    db: \"postgres\"\n    password: \"postgres\"\n    user: \"postgres\"\n    driver: \"postgres\"\n    # optional\n    # postgres only, schema default value: public\n    # schema: \"public\"\nlimit: 50\n</code></pre> <p>Once created we can launch <code>dblab</code> with the command:</p> <p><pre><code>dblab --config\n</code></pre> If you don't specify the name of the database configuration with <code>--cfg-name</code> then <code>dblab</code> will use the first configuration defined under the<code>database</code> field.</p>"},{"location":"tutorials/config-file/#multiple-databases","title":"Multiple Databases","text":"<p>But, as we all know, on the daily basis we tend to access multiple databases or the \"same\" database but in different environments. So using the <code>--cfg-name</code> flag can be very handy in these cases.</p> <p>In the following case we have 3 environments: <code>local</code>, <code>staging</code> and <code>prod</code>. So the yaml file would look like this (but with your own credentials):</p> <p><pre><code>database:\n  - name: \"local\"\n    host: \"&lt;LOCAL HOST ADDRESS&gt;\"\n    port: 5432\n    db: \"&lt;DB NAME&gt;\"\n    password: \"&lt;PASSWORD&gt;\"\n    user: \"&lt;USERNAME&gt;\"\n    schema: \"public\"\n    driver: \"postgres\"\n  - name: \"staging\"\n    host: \"&lt;STAGING HOST ADDRESS&gt;\"\n    port: 5432\n    db: \"&lt;DB NAME&gt;\"\n    password: \"&lt;PASSWORD&gt;\"\n    user: \"&lt;USERNAME&gt;\"\n    schema: \"public\"\n    driver: \"postgres\"\n  - name: \"prod\"\n    host: \"&lt;PROD HOST ADDRESS&gt;\"\n    port: 5432\n    db: \"&lt;DB NAME&gt;\"\n    password: \"&lt;PASSWORD&gt;\"\n    user: \"&lt;USERNAM&gt;\"\n    schema: \"public\"\n    driver: \"postgres\"\n# should be greater than 0, otherwise the app will error out\nlimit: 50\n</code></pre> And in order to launch a specific environment/configuration we have to use the <code>--cfg-name</code> flag, followed by the name of the database configuration.</p> <pre><code>dblab --config --cfg-name \"prod\"\n</code></pre>"},{"location":"tutorials/navigation/","title":"Navigation","text":"<p>One of the main features of dblab is to be a simple but very useful UI to interact with your database. </p> <ul> <li>Ctrl+I to move from Rows to Indexes and backwards.</li> <li>Ctrl+T to move from Rows to Constraints and backwards.</li> <li>Ctrl+S to move from Rows to Structure and backwards.</li> </ul> <p>When selected each panel will show different information in the bottom box:</p> <ul> <li>Rows: Will show the result of the executed query. Press Ctrl+Space to execute the query.     </li> <li>Structure: Will show the schema of the table selected </li> <li>Constraints: Will show the constraints of the table selected </li> <li>Indexes: Will show the indexes of the table selected </li> </ul> <p>In order to be able to see the information of <code>Structure</code>, <code>Constraints</code> or <code>Indexes</code> first you need to select a table from the left menu.  </p> <p>To navigate there you can use:</p> <ul> <li>Ctrl+H: Toggle to the panel on the left</li> <li>Ctrl+J: Toggle to the panel below</li> <li>Ctrl+K: Toggle to the panel above</li> <li>Ctrl+L: Toggle to the panel on the right</li> </ul> <p>Once you are placed above the correct name in the menu press Enter to select the table. Now you can navigate to the different panels to see the information related to it. </p>"},{"location":"tutorials/navigation/#key-bindings","title":"Key Bindings","text":"Key Description Ctrl+Space If the query panel is active, execute the query Ctrl+D Cleans the whole text from the query editor, when the editor is selected Enter If the tables panel is active, list all the rows as a result set on the rows panel and display the structure of the table on the structure panel Ctrl+S If the rows panel is active, switch to the schema panel. The opposite is true Ctrl+T If the rows panel is active, switch to the constraints view. The opposite is true Ctrl+I If the rows panel is active, switch to the indexes view. The opposite is true Ctrl+H Toggle to the panel on the left Ctrl+J Toggle to the panel below Ctrl+K Toggle to the panel above Ctrl+L Toggle to the panel on the right Arrow Up Next row of the result set on the panel. Views: rows, table, constraints, structure and indexes k Next row of the result set on the panel. Views: rows, table, constraints, structure and indexes Arrow Down Previous row of the result set on the panel. Views: rows, table, constraints, structure and indexes j Previous row of the result set on the panel. Views: rows, table, constraints, structure and indexes Arrow Right Horizontal scrolling on the panel. Views: rows, constraints, structure and indexes l Horizontal scrolling on the panel. Views: rows, constraints, structure and indexes Arrow Left Horizontal scrolling on the panel. Views: rows, constraints, structure and indexes h Horizontal scrolling on the panel. Views: rows, constraints, structure and indexes g Move cursor to the top of the panel's dataset. Views: rows, constraints, structure and indexes G Move cursor to the bottom of the panel's dataset. Views: rows, constraints, structure and indexes Ctrl-F Move down by one page. Views: rows, constraints, structure and indexes Ctrl-B Move up by one page. Views: rows, constraints, structure and indexes Ctrl+c Quit"}]}